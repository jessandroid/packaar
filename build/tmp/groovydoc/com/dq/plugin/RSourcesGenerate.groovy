package com.dq.plugin

import com.google.common.base.Charsets
import com.google.common.collect.Lists
import com.google.common.collect.Maps
import com.google.common.io.Files
import com.squareup.javapoet.FieldSpec
import com.squareup.javapoet.JavaFile
import com.squareup.javapoet.TypeName
import com.squareup.javapoet.TypeSpec
import joptsimple.internal.Strings

import javax.lang.model.element.Modifier


/****
 * 生成资源文件
 * @auth dengquan@360.cn
 * Create by dengquan on 2018/8/10
 *
 **** */
class RSourcesGenerate {

    static void generate(File outputDir, AndroidArchiveLibrary androidArchiveLibrary) throws IOException {
        File symbolFile = androidArchiveLibrary.getSymbol()
        println("symbolFile :" + symbolFile.getPath())
        if (!symbolFile.exists()) {
            return
        }
        List<String> lines = Files.readLines(symbolFile, Charsets.UTF_8)
        Map<String, List<TextSymbolItem>> symbolItemsMap = Maps.newHashMap()
        for (String line : lines) {
            String[] strings = line.split(" ", 4)
            TextSymbolItem symbolItem = new TextSymbolItem()
            symbolItem.type = strings[0]
            symbolItem.clazz = strings[1]
            symbolItem.name = strings[2]
            symbolItem.value = strings[3]
            List<TextSymbolItem> symbolItems = symbolItemsMap.get(symbolItem.clazz)
            if (symbolItems == null) {
                symbolItems = Lists.newArrayList()
                symbolItemsMap.put(symbolItem.clazz, symbolItems)
            }
            symbolItems.add(symbolItem)
        }
        if (symbolItemsMap.isEmpty()) {
            //empty R.text
            println("symbolItemsMap is empty")
            return
        }
        String packageName = androidArchiveLibrary.getPackageName()
        if (Strings.isNullOrEmpty(packageName)) {
            throw new RuntimeException("Parse package error !")
        }
        //write R.java
        TypeSpec.Builder classBuilder = TypeSpec.classBuilder("R").addModifiers(Modifier.PUBLIC,
                Modifier.FINAL).addJavadoc("AUTO-GENERATED FILE.  DO NOT MODIFY.\n").addJavadoc("\n")
                .addJavadoc("This class was automatically generated by the\n" +
                "fat-aar-plugin (https://github.com/MRobotSDK/fat-aar-plugin)\n" +
                "from the R.txt of the dependency it found.\n" +
                "It should not be modified by hand.")
        println("second step!!!!")
        for (String clazz : symbolItemsMap.keySet()) {
            TypeSpec.Builder icb = TypeSpec.classBuilder(clazz).addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
            List<TextSymbolItem> tsis = symbolItemsMap.get(clazz)
            for (TextSymbolItem item : tsis) {
                TypeName typeName = null
                if ("int".equals(item.type)) {
                    typeName = TypeName.INT
                }
                if ("int[]".equals(item.type)) {
                    typeName = TypeName.get(int[].class)
                }
                if (typeName == null) {
                    throw new RuntimeException("Unknow class type int :" + symbolFile)
                }
                FieldSpec fieldSpec = FieldSpec.builder(typeName, item.name).addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
                        .initializer(item.value).build()
                icb.addField(fieldSpec)
            }
            classBuilder.addType(icb.build())
        }
        JavaFile javaFile = JavaFile.builder(packageName,classBuilder.build()).build()
        javaFile.writeTo(outputDir)
    }


    static class TextSymbolItem {
        String type
        String clazz
        String name
        String value
    }

}
